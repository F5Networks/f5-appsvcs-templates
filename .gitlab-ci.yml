image: $DOCKERHUB_URL/node:14-buster

include:
  - project: automation-toolchain/atg-shared-templates
    file: security/base.gitlab-ci.yml
    ref: v1.1.6

variables:
  SECRET_DETECTION_EXCLUDED_PATHS: "presentation/css/choices.min.css"

stages:
    - atg-shared-checks
    - test_build
    - build
    - perfomance_tests
    - publish
    - release

coverage:
    stage: test_build
    tags:
        - cm-official-docker-executor
    script:
        - npm ci
        - npm run lint
        - npm run testtemplates
        - npm run coverage
        - npx nyc report -r html -r text
    artifacts:
        paths:
            - coverage

build:
    stage: test_build
    script:
        - apt-get update && apt-get install -y rpm git
        - npm ci && npm run build
    artifacts:
        expire_in: 1 week
        name: f5-appsvcs-templates.$CI_BUILD_REF
        paths:
            - dist/*

audit_packages:
    stage: test_build
    allow_failure: true
    tags:
        - cm-official-docker-executor
    script:
        - npm ci && npm audit --production

create_docs:
  image: ${CONTAINTHEDOCS_IMAGE}
  stage: test_build
  allow_failure: true
  script:
    - cd docs
    - pip3 install -r requirements.txt
    - if [ "$CI_COMMIT_REF_NAME" = "docs-staging" ] || [ "$CI_COMMIT_REF_NAME" = "docs-latest" ]; then
    -   rm -r _templates
    - fi
    - npm ci
    - make html
    - make test
  tags:
    - cm-official-docker-executor
  artifacts:
    expire_in: 1 week
    name: sphinx-docs_$CI_BUILD_REF
    paths:
      - docs/_build/html

pages:
    stage: publish
    environment:
        name: staging
        url: https://${CI_PROJECT_NAMESPACE}.${PAGES_DOMAIN}/${CI_PROJECT_NAME}/
    tags:
        - cm-official-docker-executor
    script:
       # Base directory and index
       - PUBLIC_DIR='./public'
       - mkdir -p ${PUBLIC_DIR}
       - cp pages/index.html ${PUBLIC_DIR}
       # Public Docs
       - PUBLIC_DOCS=${PUBLIC_DIR}/public-docs
       - mkdir -p ${PUBLIC_DOCS}
       - test -e docs/ && cp -R docs/_build/html/* ${PUBLIC_DOCS}
       # Unit test results (coverage)
       - COVERAGE_DOCS=${PUBLIC_DIR}/coverage-docs
       - mkdir -p ${COVERAGE_DOCS}
       - cp -R coverage/* ${COVERAGE_DOCS}
      # Perfomance test results (coverage)
       - PERFOMANCE_TESTS=${PUBLIC_DIR}/perfomance-tests-results
       - mkdir -p ${PERFOMANCE_TESTS}
       - cp -R perfomance-tests-results/* ${PERFOMANCE_TESTS} || true # Allow failure for PerfTests
    artifacts:
        paths:
            - public
    only:
        - develop
        - doc-wip
        - schedules

clouddocs:
  image: ${CONTAINTHEDOCS_IMAGE}
  stage: publish
  tags:
    - cm-official-docker-executor
  only:
    - docs-staging@automation-toolchain/mystique
    - docs-latest@automation-toolchain/mystique
  dependencies:
    - create_docs
  script:
    - apk add --update --no-cache jq
    - scripts/publish-clouddocs.sh

publish_to_github:
  stage: release
  variables: 
    GH_TOKEN: "${GITHUB_API_TOKEN}"
  script:
    - npm ci
    - scripts/release.sh
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /Bump version to ([0-9]+\.){2,2}[0-9]+[^-]/ && $CI_COMMIT_BRANCH == "master"

perfomance_tests:
  stage: perfomance_tests
  only:
    - schedules
  before_script:
    - npm ci
  script:
    # Test Cases name is constructed using the folliwing: ${numApplications}_${numTenants}_${batchSize}
    - node scripts/bench.js --testCaseName 50-1-1 --numApplications 50 --numTenants 1 --batchSize 1
    - node scripts/bench.js --testCaseName 100-1-10 --numApplications 100 --numTenants 1 --batchSize 10
    - node scripts/bench.js --testCaseName 100-1-25 --numApplications 100 --numTenants 1 --batchSize 25
    - node scripts/bench.js --testCaseName 100-20-10 --numApplications 100 --numTenants 20 --batchSize 10
    - node scripts/bench.js --testCaseName 300-20-50 --numApplications 300 --numTenants 20 --batchSize 50
    # Generating HTML results pages
    - node scripts/generate_pref_tests_html.js
  artifacts:
    paths:
      - perfomance-tests-results

